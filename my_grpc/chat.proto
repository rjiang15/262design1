syntax = "proto3";

package chat;

import "google/protobuf/empty.proto";

// For debugging, replicating SHOW_DB
message ShowDBResponse {
  repeated string lines = 1; 
}

// For LIST command (pattern, offset, limit)
message ListRequest {
  string pattern = 1; 
  int32 offset = 2;
  int32 limit = 3;
}
message ListResponse {
  string status = 1;   
  string message = 2;  
  int32 total_count = 3;
  repeated string accounts = 4; 
}

// For READ_CONVO and READ_FULL_CONVO (allow `n` to be string to replicate custom-protocol logic)
message ReadConvoRequest {
  string username = 1;
  string hashed_password = 2;
  string other_user = 3;
  string n = 4;  // changed to string so we can pass "a" or "5"
}
message ReadConvoResponse {
  string status = 1;   
  string message = 2;  
  repeated Message messages = 3;
}

// For POLL_CONVO
message PollConvoRequest {
  string username = 1;
  string hashed_password = 2;
  string other_user = 3;
}
message PollConvoResponse {
  string status = 1;  
  string message = 2; 
  repeated Message messages = 3; 
}

// For READ (inbox read). n is also a string
message ReadInboxRequest {
  string username = 1;
  string hashed_password = 2;
  string n = 3;  // changed to string
}
message ReadInboxResponse {
  string status = 1;    
  string message = 2;
  repeated Message messages = 3;
}

// For account management & messaging
message AccountRequest {
  string username = 1;
  string hashed_password = 2;
}

message SendMessageRequest {
  string sender = 1;
  string hashed_password = 2;
  string recipient = 3;
  string message = 4;
}

// For DELETE_MSG
message DeleteMessageRequest {
  string username = 1;
  string hashed_password = 2;
  string message_ids = 3; 
}

// For MARK_READ
message MarkReadRequest {
  string username = 1;
  string hashed_password = 2;
  string message_id = 3;
}

// For listing conversations
message ListConversationsRequest {
  string username = 1;
  string hashed_password = 2;
}
message ListConversationsResponse {
  int32 total_unread = 1;
  repeated Conversation conversations = 2;
}

message Conversation {
  string partner = 1;
  int32 unread = 2;
  string last_message = 3; 
}

message Response {
  string status = 1;   // "OK" or "ERROR"
  string message = 2;  
}

message Message {
  int32 id = 1;
  string sender = 2;
  string content = 3;
}

service ChatService {
  // Debug
  rpc ShowDB(google.protobuf.Empty) returns (ShowDBResponse);

  // Listing accounts
  rpc List(ListRequest) returns (ListResponse);

  // Listing conversations
  rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse);

  // Reading from inbox
  rpc ReadInbox(ReadInboxRequest) returns (ReadInboxResponse);

  // Reading partial conversation
  rpc ReadConvo(ReadConvoRequest) returns (ReadConvoResponse);

  // Reading full conversation
  rpc ReadFullConvo(ReadConvoRequest) returns (ReadConvoResponse);

  // Polling conversation
  rpc PollConvo(PollConvoRequest) returns (PollConvoResponse);

  // Account management
  rpc CreateAccount(AccountRequest) returns (Response);
  rpc Login(AccountRequest) returns (Response);
  rpc Logout(AccountRequest) returns (Response);
  rpc DeleteAccount(AccountRequest) returns (Response);

  // Send message
  rpc SendMessage(SendMessageRequest) returns (Response);

  // Delete message(s)
  rpc DeleteMessage(DeleteMessageRequest) returns (Response);

  // Mark read
  rpc MarkRead(MarkReadRequest) returns (Response);
}
