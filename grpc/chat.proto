syntax = "proto3";

package chat;

import "google/protobuf/empty.proto";

// For debugging, replicating SHOW_DB
message ShowDBResponse {
  // We'll return multiple lines of output
  repeated string lines = 1;
}

// For LIST command (pattern, offset, limit)
message ListRequest {
  string pattern = 1; // e.g. "%", or something the client can pass
  int32 offset = 2;
  int32 limit = 3;
}
message ListResponse {
  string status = 1;    // "OK" or "ERROR"
  string message = 2;   // e.g. "No accounts found" or "Total accounts matching..."
  int32 total_count = 3; 
  repeated string accounts = 4; // each account that matched
}

// For READ_CONVO and READ_FULL_CONVO
message ReadConvoRequest {
  string username = 1;
  string hashed_password = 2;
  string other_user = 3;
  int32 n = 4;
}
message ReadConvoResponse {
  string status = 1;    // "OK" or "ERROR"
  string message = 2;   // error messages or leftover text
  repeated Message messages = 3;
}

// For POLL_CONVO
message PollConvoRequest {
  string username = 1;
  string hashed_password = 2;
  string other_user = 3;
}
message PollConvoResponse {
  string status = 1;    // "OK" or "ERROR"
  string message = 2;   // "No new messages" or error text
  repeated Message messages = 3; // unread messages just read
}

// For READ (just "READ username hashed_password n")
// i.e., reading from the user's general inbox (ordered by ID)
message ReadInboxRequest {
  string username = 1;
  string hashed_password = 2;
  int32 n = 3;
}
message ReadInboxResponse {
  string status = 1;    
  string message = 2;
  repeated Message messages = 3;
}

// For account management & messaging
message AccountRequest {
  string username = 1;
  string hashed_password = 2;
}

message SendMessageRequest {
  string sender = 1;
  string hashed_password = 2;
  string recipient = 3;
  string message = 4;
}

// For DELETE_MSG. We allow multiple IDs or "ALL"
message DeleteMessageRequest {
  string username = 1;
  string hashed_password = 2;
  // Could be "ALL", or "123", or "100,101,102"
  string message_ids = 3;
}

// For MARK_READ
message MarkReadRequest {
  string username = 1;
  string hashed_password = 2;
  // single ID or "ALL"
  string message_id = 3;
}

// For listing conversations
message ListConversationsRequest {
  string username = 1;
  string hashed_password = 2;
}
message ListConversationsResponse {
  int32 total_unread = 1;
  repeated Conversation conversations = 2;
}

message Conversation {
  string partner = 1;
  int32 unread = 2;
  string last_message = 3; // e.g. "alice: hello"
}

message Response {
  string status = 1;   // "OK" or "ERROR"
  string message = 2;  // more detail
}

message Message {
  int32 id = 1;
  string sender = 2;
  string content = 3;
}

// The ChatService: all RPCs replicate the custom commands from server.py
service ChatService {

  // Debug command: replicate SHOW_DB
  rpc ShowDB(google.protobuf.Empty) returns (ShowDBResponse);

  // Listing accounts (replicates LIST pattern offset limit)
  rpc List(ListRequest) returns (ListResponse);

  // Listing conversations (replicates LIST_CONVERSATIONS)
  rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse);

  // Reading from the user's general inbox (READ)
  rpc ReadInbox(ReadInboxRequest) returns (ReadInboxResponse);

  // Reading partial conversation (READ_CONVO)
  rpc ReadConvo(ReadConvoRequest) returns (ReadConvoResponse);

  // Reading full conversation (READ_FULL_CONVO)
  rpc ReadFullConvo(ReadConvoRequest) returns (ReadConvoResponse);

  // Polling conversation for new messages (POLL_CONVO)
  rpc PollConvo(PollConvoRequest) returns (PollConvoResponse);

  // Account management
  rpc CreateAccount(AccountRequest) returns (Response);
  rpc Login(AccountRequest) returns (Response);
  rpc Logout(AccountRequest) returns (Response);
  rpc DeleteAccount(AccountRequest) returns (Response);

  // Send message (SEND)
  rpc SendMessage(SendMessageRequest) returns (Response);

  // Delete message(s) (DELETE_MSG)
  rpc DeleteMessage(DeleteMessageRequest) returns (Response);

  // Mark read (MARK_READ)
  rpc MarkRead(MarkReadRequest) returns (Response);
}
